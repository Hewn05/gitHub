/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.68
 * Generated at: 2022-11-07 00:55:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.saii.signup;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class idcheck_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>id 중복확인 창</title>\r\n");
      out.write("<style>\r\n");
      out.write("#form {width: 400px; margin:auto; padding:30px}\r\n");
      out.write("h2 { text-align: center;}\r\n");
      out.write("\r\n");
      out.write("div.ck01 {display: flex; margin:0 auto; top:50%; left:50%;}\r\n");
      out.write(".button {padding: 0; border: none; border-radius:5px;  font: inherit;\r\n");
      out.write("  			color: inherit; background-color: #FFE3ED; cursor: pointer;}\r\n");
      out.write("input[type=text]  { vertical-align: 5px; width:400px; height:40px; display: inline-block;\r\n");
      out.write("									border:none; background: #F7F7F7;}\r\n");
      out.write(".ckk {margin:0; border:none; overflow:visible; border-radius:0; display:inline-block;\r\n");
      out.write("				vertical-align: middle; font-size: 0.8rem; line-height: 38px; text-align: center;\r\n");
      out.write("    			text-decoration: none; text-transform: uppercase; transition: 0.1s; \r\n");
      out.write("    			transition-property: color, background-color, border-color;\r\n");
      out.write("    			width: 60px !important; }	\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	function idCk(form){\r\n");
      out.write("		if(form.id.value == \"\"){\r\n");
      out.write("			alert(\"아이디를 입력하세요\");\r\n");
      out.write("			form.id.focus();\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		//아이디 길이 체크 (6~15자)\r\n");
      out.write("		if (form.id.value.length < 6 || form.id.value.length > 15) {\r\n");
      out.write("			alert(\"아이디를 6~15자까지 입력해주세요.\")\r\n");
      out.write("			form.id.focus();\r\n");
      out.write("			form.id.select();\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("		//아이디 유효성 검사 (영문소문자, 숫자만 허용)\r\n");
      out.write("		for (var i = 0; i < form.id.value.length; i++) {\r\n");
      out.write("			ch = form.id.value.charAt(i)\r\n");
      out.write("			if (!(ch >= '0' && ch <= '9') && !(ch >= 'a' && ch <= 'z') && !(ch >= 'A' && ch <= 'Z')) {\r\n");
      out.write("				alert(\"아이디는 영문 대소문자, 숫자만 입력가능합니다.\")\r\n");
      out.write("				form.id.focus();\r\n");
      out.write("				form.id.select();\r\n");
      out.write("				return false;\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		//아이디에 공백 사용하지 않기\r\n");
      out.write("		if (form.id.value.indexOf(\" \") >= 0) {\r\n");
      out.write("			alert(\"아이디에 공백을 사용할 수 없습니다.\")\r\n");
      out.write("			form.id.focus();\r\n");
      out.write("			form.id.select()\r\n");
      out.write("			return false;\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	function idsend(){\r\n");
      out.write("		opener.document.getElementById(\"userId\").value = document.getElementById(\"Idchk\").value;\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("	<h2>ID 중복확인</h2>\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   <form id=\"form\" name=\"writeFrm\" method=\"post\"\r\n");
      out.write("   		action=\"http://localhost:8081/SAII/idcheck\" onsubmit=\"return idCk(this);\">\r\n");
      out.write("      \r\n");
      out.write("         <div class=\"ck01\">\r\n");
      out.write("               <input type=\"text\" id=\"Idchk\" name=\"id\"  value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.id }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("               <button type=\"submit\" class=\"ckk\" onclick=\"idsend()\">검증</button>\r\n");
      out.write("        </div>    \r\n");
      out.write("      \r\n");
      out.write("   </form>\r\n");
      out.write("   \r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("<!--마우스 커서-->	\r\n");
      out.write("<style type=\"text/css\">* {cursor: url(https://ani.cursors-4u.net/symbols/sym-9/sym833.ani), url(https://ani.cursors-4u.net/symbols/sym-9/sym833.png), auto !important;}</style>\r\n");
      out.write("<a href=\"https://www.cursors-4u.com/cursor/2018/02/17/fast-beating-heart.html\" target=\"_blank\" title=\"Fast Beating Heart\"><img src=\"https://cur.cursors-4u.net/cursor.png\" border=\"0\" alt=\"Fast Beating Heart\" style=\"position:absolute; top: 0px; right: 0px;\" /></a>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
